#!/bin/bash

# „É≠„Éº„Ç´„É´ÈñãÁô∫Áî®„ÅÆ„Éá„Éó„É≠„Ç§„Çπ„ÇØ„É™„Éó„Éà
# „Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„É≠„Éº„Ç´„É´Áí∞Â¢É„Åã„ÇâGCE„Å´„Éá„Éó„É≠„Ç§„Åô„ÇãÈöõ„Å´‰ΩøÁî®„Åó„Åæ„Åô

set -e

# „Ç´„É©„Éº„Ç≥„Éº„Éâ
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
check_env_var() {
    if [ -z "${!1}" ]; then
        echo -e "${RED}Error: Environment variable $1 is not set${NC}"
        exit 1
    fi
}

echo -e "${GREEN}üöÄ Discord Bot Local Deploy Script${NC}"
echo "================================"

# Áí∞Â¢ÉÂ§âÊï∞„ÉÅ„Çß„ÉÉ„ÇØ
echo "Checking environment variables..."
check_env_var "GCP_PROJECT_ID"
check_env_var "GCE_INSTANCE"
check_env_var "GCE_ZONE"

# „Éá„Éï„Ç©„É´„ÉàÂÄ§Ë®≠ÂÆö
GCE_INSTANCE=${GCE_INSTANCE:-discord-bot-instance}
GCE_ZONE=${GCE_ZONE:-us-central1-a}
IMAGE_NAME=${IMAGE_NAME:-discord-bot}

echo "Project ID: $GCP_PROJECT_ID"
echo "Instance: $GCE_INSTANCE"
echo "Zone: $GCE_ZONE"
echo ""

# gcloud„ÅÆË™çË®ºÁ¢∫Ë™ç
echo "Checking gcloud authentication..."
if ! gcloud auth list --filter=status:ACTIVE --format="value(account)" | head -n1 > /dev/null; then
    echo -e "${RED}Error: Not authenticated with gcloud. Please run 'gcloud auth login'${NC}"
    exit 1
fi

# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆö
gcloud config set project $GCP_PROJECT_ID

# Docker„Ç§„É°„Éº„Ç∏„Çí„Éì„É´„Éâ
echo -e "${YELLOW}Building Docker image...${NC}"
docker build -t "gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:latest" .

# DockerË™çË®ºË®≠ÂÆö
echo "Configuring Docker authentication..."
gcloud auth configure-docker --quiet

# „Ç§„É°„Éº„Ç∏„Çí„Éó„ÉÉ„Ç∑„É•
echo -e "${YELLOW}Pushing Docker image to GCR...${NC}"
docker push "gcr.io/$GCP_PROJECT_ID/$IMAGE_NAME:latest"

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆÂ≠òÂú®Á¢∫Ë™ç
echo "Checking if GCE instance exists..."
if ! gcloud compute instances describe $GCE_INSTANCE --zone=$GCE_ZONE > /dev/null 2>&1; then
    echo -e "${YELLOW}Creating new GCE instance...${NC}"
    
    # „Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó„Çπ„ÇØ„É™„Éó„Éà„ÇíÊ∫ñÂÇô
    STARTUP_SCRIPT=$(cat gce-startup-script.sh | sed "s/PROJECT_ID/$GCP_PROJECT_ID/g")
    
    gcloud compute instances create $GCE_INSTANCE \
        --zone=$GCE_ZONE \
        --machine-type=e2-micro \
        --boot-disk-size=10GB \
        --boot-disk-type=pd-standard \
        --boot-disk-device-name=$GCE_INSTANCE \
        --image-family=cos-stable \
        --image-project=cos-cloud \
        --tags=http-server,https-server,discord-bot \
        --scopes=https://www.googleapis.com/auth/cloud-platform \
        --metadata="startup-script=$STARTUP_SCRIPT"
else
    echo -e "${GREEN}Instance already exists${NC}"
fi

# Áí∞Â¢ÉÂ§âÊï∞„ÇíÊõ¥Êñ∞
echo -e "${YELLOW}Updating instance metadata...${NC}"
gcloud compute instances add-metadata $GCE_INSTANCE \
    --zone=$GCE_ZONE \
    --metadata="startup-script=$(cat gce-startup-script.sh | sed "s/PROJECT_ID/$GCP_PROJECT_ID/g")"

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÇíÂÜçËµ∑Âãï
echo -e "${YELLOW}Restarting instance to deploy new version...${NC}"
gcloud compute instances reset $GCE_INSTANCE --zone=$GCE_ZONE

# „Éá„Éó„É≠„Ç§ÂÆå‰∫Ü„ÇíÂæÖ„Å§
echo -e "${YELLOW}Waiting for deployment to complete...${NC}"
sleep 60

# „Ç§„É≥„Çπ„Çø„É≥„Çπ„ÅÆIP„Ç¢„Éâ„É¨„Çπ„ÇíÂèñÂæó
INSTANCE_IP=$(gcloud compute instances describe $GCE_INSTANCE --zone=$GCE_ZONE --format="get(networkInterfaces[0].accessConfigs[0].natIP)")

echo "Instance IP: $INSTANCE_IP"

# „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
echo "Performing health check..."
for i in {1..30}; do
    if curl -f "http://$INSTANCE_IP:3000/health" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Deployment successful!${NC}"
        echo "Bot is running at: http://$INSTANCE_IP:3000"
        echo "Health check: http://$INSTANCE_IP:3000/health"
        exit 0
    else
        echo "Health check failed, retrying in 10 seconds... ($i/30)"
        sleep 10
    fi
done

echo -e "${RED}‚ùå Deployment failed - health check timeout${NC}"
echo "Please check the instance logs:"
echo "gcloud compute ssh $GCE_INSTANCE --zone=$GCE_ZONE --command='sudo docker logs discord-bot'"
exit 1